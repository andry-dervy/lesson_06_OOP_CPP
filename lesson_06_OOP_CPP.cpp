//============================================================================
// Name        : lesson_06_OOP_CPP.cpp
// Author      : andry antonenko
// IDE         : Qt Creator 4.14.2 based on Qt 5.15.2
// Description : lesson 06 of the object-oriented programming on C++ course
//============================================================================
#include <QCoreApplication>
#include <iostream>
#include <stdlib.h>
//#include <list>
//#include <set>
#include <string>
//#include <sstream>
using namespace std;
//----------------------------------------------------------------------------
//#define NDEBUG
#include <cassert>
//----------------------------------------------------------------------------
//#include "game_blackjack.h"
//----------------------------------------------------------------------------
/*
1. Создать программу, которая считывает целое число типа int.
И поставить «защиту от дурака»:
если пользователь вводит что-то кроме одного целочисленного значения,
нужно вывести сообщение об ошибке и
предложить ввести число еще раз.
Пример неправильных введенных строк:
rbtrb
nj34njkn
1n
//*/

int inputIntPositive()
{
  int n;
  while (true)
  {
    cin >> n;
    if (cin.fail())
    {
      cout << "Требуется ввести целое число!" << endl;
      cin.clear();
      cin.ignore(32767, '\n');
    }
    else
    {
      return n;
    }
  }
}


void task_1()
{
  cout << "Task 1\n" << endl;

  cout << "Введите целое число: ";
  int n = inputIntPositive();

  cout << "Пользователь ввел число: " << n;

  cout << endl;
}

//----------------------------------------------------------------------------
/*
2. Создать собственный манипулятор endll для стандартного потока вывода,
который выводит два перевода строки и сбрасывает буфер.
//*/

ostream& endll (ostream& out)
{
    out.put('\n');
    out.put('\n');
    out.flush();
    return out;
}

void task_2()
{
  cout << "\nTask 2\n" << endl;

  cout << "Пример для endll: " << endll;

  cout << endl;
}

//----------------------------------------------------------------------------
/*
3. Реализовать класс Player, который наследует от класса GenericPlayer.
У этого класса будет 4 метода:
    • virtual bool IsHitting() const - реализация чисто виртуальной функции базового класса.
Метод спрашивает у пользователя, нужна ли ему еще одна карта и
возвращает ответ пользователя в виде true или false.
    • void Win() const - выводит на экран имя игрока и сообщение, что он выиграл.
    • void Lose() const - выводит на экран имя игрока и сообщение, что он проиграл.
    • void Push() const - выводит на экран имя игрока и сообщение, что он сыграл вничью.
//*/
//----------------------------------------------------------------------------
/*
4. Реализовать класс House, который представляет дилера.
Этот класс наследует от класса GenericPlayer.
У него есть 2 метода:
    • virtual bool IsHitting() const - метод указывает,
нужна ли дилеру еще одна карта.
Если у дилера не больше 16 очков, то он берет еще одну карту.
    • void FlipFirstCard() - метод переворачивает первую карту дилера.
//*/
//----------------------------------------------------------------------------
/*
5. Написать перегрузку оператора вывода для класса Card.
Если карта перевернута рубашкой вверх (мы ее не видим),
вывести ХХ, если мы ее видим, вывести масть и номинал карты.
Также для класса GenericPlayer написать перегрузку оператора вывода,
который должен отображать имя игрока и его карты,
а также общую сумму очков его карт.
//*/
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
int main(int argc, char *argv[])
{
  QCoreApplication a(argc, argv);
  //----------------------------------------------------------------------------
  // Task 1
  //*
  task_1();
  //*/
  //----------------------------------------------------------------------------
  // Task 2
  //*
  task_2();
  //*/
  //----------------------------------------------------------------------------
  // Task 3
  /*
  task_3();
  //*/
  //----------------------------------------------------------------------------
  return a.exec();
}
